extends ../../components/skeleton.jade

block neck
	title MadKudu | Predictive model visualization

	script analytics.page('Customers - 3313 page')

	script(src="https://cdnjs.cloudflare.com/ajax/libs/d3/3.3.0/d3.min.js")

	style.

		body {
			background-color: white;
		}

		//- html{
		//-     font: 10px sans-serif;
		//- }

		svg {
		    border: 1px solid silver;
			background-color: #f2f2f2;
		}

		.node {
		    cursor: pointer;
		}

		.node circle {
		    stroke: steelblue;
		    stroke-width: 1.5px;
		}

		.link {
		    fill: none;
		    stroke: lightgray;
		    stroke-width: 1.5px;
		}

	script.

		$( document ).ready(function() {

		var json =
			 {
				"name": " mk_employee_count<= 200.0 ",
				"children": [{
					"name": " metrics__raised<= 2.1E7 ",
					"children": [{
						"name": " google__rank<= 4.0 ",
						"children": [{
							"name": " max_tech_planin {1.0,0.0,2.0} ",
							"children": [{
								"name": " mk_alexa_global_rank<= 131777.0 ",
								"children": [{
									"name": " mk_alexa_global_rank<= 105967.0 ",
									"children": [{
										"name": "predict 0.004511894995898278 (prob = -1.0) "
									}, {
										"name": "predict 0.03571428571428571 (prob = -1.0) "
									}]
								}, {
									"name": "predict 0.0 (prob = -1.0) "
								}]
							}, {
								"name": " mk_alexa_global_rank<= 1206671.0 ",
								"children": [{
									"name": "predict 0.0 (prob = -1.0) "
								}, {
									"name": " mk_employee_count<= 45.0 ",
									"children": [{
										"name": "predict 0.0 (prob = -1.0) "
									}, {
										"name": "predict 1.0 (prob = -1.0) "
									}]
								}]
							}]
						}, {
							"name": " industry_indexed<= 9.0 ",
							"children": [{
								"name": " mk_alexa_global_rank<= 3251.0 ",
								"children": [{
									"name": " mk_employee_count<= 60.0 ",
									"children": [{
										"name": "predict 0.0 (prob = -1.0) "
									}, {
										"name": "predict 1.0 (prob = -1.0) "
									}]
								}, {
									"name": "predict 0.0 (prob = -1.0) "
								}]
							}, {
								"name": " mk_alexa_global_rank<= 14305.0 ",
								"children": [{
									"name": " industry_indexed<= 11.0 ",
									"children": [{
										"name": "predict 1.0 (prob = -1.0) "
									}, {
										"name": "predict 0.0 (prob = -1.0) "
									}]
								}, {
									"name": " max_tech_planin {0.0,2.0} ",
									"children": [{
										"name": "predict 0.0 (prob = -1.0) "
									}, {
										"name": "predict 0.5 (prob = -1.0) "
									}]
								}]
							}]
						}]
					}, {
						"name": " country_indexed<= 13.0 ",
						"children": [{
							"name": " google__rank<= 6.0 ",
							"children": [{
								"name": " metrics__marketcap<= 0.0 ",
								"children": [{
									"name": " industry_indexed<= 1.0 ",
									"children": [{
										"name": "predict 0.2 (prob = -1.0) "
									}, {
										"name": "predict 0.04477611940298507 (prob = -1.0) "
									}]
								}, {
									"name": "predict 1.0 (prob = -1.0) "
								}]
							}, {
								"name": " mk_employee_count<= 60.0 ",
								"children": [{
									"name": "predict 1.0 (prob = -1.0) "
								}, {
									"name": "predict 0.0 (prob = -1.0) "
								}]
							}]
						}, {
							"name": "predict 1.0 (prob = -1.0) "
						}]
					}]
				}, {
					"name": " metrics__marketcap<= 5.1284E8 ",
					"children": [{
						"name": " industry_indexed<= 2.0 ",
						"children": [{
							"name": " mk_alexa_global_rank<= 2519.0 ",
							"children": [{
								"name": " country_indexed<= 1.0 ",
								"children": [{
									"name": " mk_alexa_global_rank<= 2219.0 ",
									"children": [{
										"name": "predict 0.0 (prob = -1.0) "
									}, {
										"name": "predict 1.0 (prob = -1.0) "
									}]
								}, {
									"name": " mk_employee_count<= 700.0 ",
									"children": [{
										"name": "predict 0.0 (prob = -1.0) "
									}, {
										"name": "predict 1.0 (prob = -1.0) "
									}]
								}]
							}, {
								"name": " mk_employee_count<= 350.0 ",
								"children": [{
									"name": " mk_employee_count<= 300.0 ",
									"children": [{
										"name": "predict 0.08333333333333333 (prob = -1.0) "
									}, {
										"name": "predict 1.0 (prob = -1.0) "
									}]
								}, {
									"name": "predict 0.0 (prob = -1.0) "
								}]
							}]
						}, {
							"name": " industry_indexed<= 4.0 ",
							"children": [{
								"name": " intersect_tech_cat_cnt_plan<= 1.0 ",
								"children": [{
									"name": " mk_alexa_global_rank<= 67147.0 ",
									"children": [{
										"name": "predict 1.0 (prob = -1.0) "
									}, {
										"name": "predict 0.0 (prob = -1.0) "
									}]
								}, {
									"name": "predict 0.0 (prob = -1.0) "
								}]
							}, {
								"name": " metrics__raised<= 1.05E8 ",
								"children": [{
									"name": " industry_indexed<= 20.0 ",
									"children": [{
										"name": "predict 0.027777777777777776 (prob = -1.0) "
									}, {
										"name": "predict 0.5555555555555556 (prob = -1.0) "
									}]
								}, {
									"name": " intersect_tech_cat_cnt_plan<= 1.0 ",
									"children": [{
										"name": "predict 0.875 (prob = -1.0) "
									}, {
										"name": "predict 0.0 (prob = -1.0) "
									}]
								}]
							}]
						}]
					}, {
						"name": " metrics__raised<= 1.05E8 ",
						"children": [{
							"name": " metrics__raised<= 8000000.0 ",
							"children": [{
								"name": " metrics__raised<= 0.0 ",
								"children": [{
									"name": " mk_employee_count<= 804.0 ",
									"children": [{
										"name": "predict 1.0 (prob = -1.0) "
									}, {
										"name": "predict 0.05263157894736842 (prob = -1.0) "
									}]
								}, {
									"name": "predict 1.0 (prob = -1.0) "
								}]
							}, {
								"name": "predict 0.0 (prob = -1.0) "
							}]
						}, {
							"name": " mk_alexa_global_rank<= 563.0 ",
							"children": [{
								"name": "predict 0.0 (prob = -1.0) "
							}, {
								"name": "predict 1.0 (prob = -1.0) "
							}]
						}]
					}]
				}]
			};


		var width = 2000;
		var height = 650;
		var maxLabel = 210;
		var duration = 500;
		var radius = 1;

		var i = 0;
		var root;

		var tree = d3.layout.tree()
		    .size([height, width]);

		var diagonal = d3.svg.diagonal()
		    .projection(function(d) { return [d.y, d.x]; });

		var svg = d3.select("#tree").append("svg")
		    .attr("width", width)
		    .attr("height", height)
		        .append("g")
		        .attr("transform", "translate(" + maxLabel + ",0)");

		root = json;
		root.x0 = height / 2;
		root.y0 = 0;

		root.children.forEach(collapse);

		function update(source)
		{
			console.log(source);

		    // Compute the new tree layout.
		    var nodes = tree.nodes(root).reverse();
		    var links = tree.links(nodes);

		    // Normalize for fixed-depth.
		    nodes.forEach(function(d) { d.y = d.depth * maxLabel; });

		    // Update the nodes…
		    var node = svg.selectAll("g.node")
		        .data(nodes, function(d){
		            return d.id || (d.id = ++i);
		        });

		    // Enter any new nodes at the parent's previous position.
		    var nodeEnter = node.enter()
		        .append("g")
		        .attr("class", "node")
		        .attr("transform", function(d){ return "translate(" + source.y0 + "," + source.x0 + ")"; })
		        .on("click", click);

		    nodeEnter.append("circle")
		        .attr("r", 0)
		        .style("fill", function(d){
		            return d._children ? "lightsteelblue" : "white";
		        });

		    nodeEnter.append("text")
		        .attr("x", function(d){
		            var spacing = computeRadius(d) + 5;
		            return d.children || d._children ? -spacing : spacing;
		        })
		        .attr("dy", "3")
		        .attr("text-anchor", function(d){ return d.children || d._children ? "end" : "start"; })
		        .text(function(d){ return d.name; })
		        .style("fill-opacity", 0);

		    // Transition nodes to their new position.
		    var nodeUpdate = node.transition()
		        .duration(duration)
		        .attr("transform", function(d) { return "translate(" + d.y + "," + d.x + ")"; });

		    nodeUpdate.select("circle")
		        .attr("r", function(d){ return computeRadius(d); })
		        .style("fill", function(d) { return d._children ? "lightsteelblue" : "#fff"; });

		    nodeUpdate.select("text").style("fill-opacity", 1);

		    // Transition exiting nodes to the parent's new position.
		    var nodeExit = node.exit().transition()
		        .duration(duration)
		        .attr("transform", function(d) { return "translate(" + source.y + "," + source.x + ")"; })
		        .remove();

		    nodeExit.select("circle").attr("r", 0);
		    nodeExit.select("text").style("fill-opacity", 0);

		    // Update the links…
		    var link = svg.selectAll("path.link")
		        .data(links, function(d){ return d.target.id; });

		    // Enter any new links at the parent's previous position.
		    link.enter().insert("path", "g")
		        .attr("class", "link")
		        .attr("d", function(d){
		            var o = {x: source.x0, y: source.y0};
		            return diagonal({source: o, target: o});
		        });

		    // Transition links to their new position.
		    link.transition()
		        .duration(duration)
		        .attr("d", diagonal);

		    // Transition exiting nodes to the parent's new position.
		    link.exit().transition()
		        .duration(duration)
		        .attr("d", function(d){
		            var o = {x: source.x, y: source.y};
		            return diagonal({source: o, target: o});
		        })
		        .remove();

		    // Stash the old positions for transition.
		    nodes.forEach(function(d){
				console.log('update nodes');

		        d.x0 = d.x;
		        d.y0 = d.y;
		    });
		}

		function computeRadius(d)
		{
		    if(d.children || d._children) return radius + (radius * nbEndNodes(d) / 10);
		    else return radius;
		}

		function nbEndNodes(n)
		{
		    nb = 0;
		    if(n.children){
		        n.children.forEach(function(c){
		            nb += nbEndNodes(c);
		        });
		    }
		    else if(n._children){
		        n._children.forEach(function(c){
		            nb += nbEndNodes(c);
		        });
		    }
		    else nb++;

		    return nb;
		}

		function click(d)
		{
		    if (d.children){
		        d._children = d.children;
		        d.children = null;
		    }
		    else{
		        d.children = d._children;
		        d._children = null;
		    }
		    update(d);
		}

		function collapse(d){
		    if (d.children){
		        d._children = d.children;
		        d._children.forEach(collapse);
		        d.children = null;
		    }
		}

		update(root);


		});




block body

	.background-white

		.block

			.container

				h1(style="margin-bottom: 50px;") Customer fit model visualization (Experimental)

				div#tree
